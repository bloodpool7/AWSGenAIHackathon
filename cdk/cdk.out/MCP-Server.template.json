{
 "Description": "Guidance for Deploying Model Context Servers on AWS (SO9018)",
 "Parameters": {
  "CloudFrontWafArnParamParameter": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/mcp/cloudfront-waf-arn-c8adc83b"
  },
  "UserPoolIdParamParameter": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/mcp/cognito/user-pool-id-c8adc83b"
  },
  "UserPoolClientIdParamParameter": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/mcp/cognito/user-pool-client-id-c8adc83b"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Resources": {
  "MCPCluster399F09A9": {
   "Type": "AWS::ECS::Cluster",
   "Properties": {
    "ClusterSettings": [
     {
      "Name": "containerInsights",
      "Value": "enhanced"
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/MCPCluster/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Container Insights V2 is Enabled with Enhanced capabilities, the Nag findings is about Container Insights (v1) which is deprecated",
       "id": "AwsSolutions-ECS4"
      }
     ]
    }
   }
  },
  "HttpSecurityGroupc8adc83b347C591A": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "HTTP Security group for MCP-Server Stack ALB",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/HttpSecurityGroup-c8adc83b/Resource"
   }
  },
  "HttpSecurityGroupc8adc83bfrompl3b927c52803CA890AC": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow HTTP traffic from CloudFront edge locations",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "HttpSecurityGroupc8adc83b347C591A",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourcePrefixListId": "pl-3b927c52",
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/HttpSecurityGroup-c8adc83b/from pl-3b927c52:80"
   }
  },
  "HttpsSecurityGroupc8adc83b85903C13": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "HTTPS Security group for MCP-Server Stack ALB",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/HttpsSecurityGroup-c8adc83b/Resource"
   }
  },
  "HttpsSecurityGroupc8adc83bfrompl3b927c524438928436E": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow HTTPS traffic from CloudFront edge locations",
    "FromPort": 443,
    "GroupId": {
     "Fn::GetAtt": [
      "HttpsSecurityGroupc8adc83b85903C13",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourcePrefixListId": "pl-3b927c52",
    "ToPort": 443
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/HttpsSecurityGroup-c8adc83b/from pl-3b927c52:443"
   }
  },
  "AccessLogsBucket83982689": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 30,
       "Status": "Enabled"
      }
     ]
    },
    "LoggingConfiguration": {
     "LogFilePrefix": "server-access-logs/"
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "BucketOwnerPreferred"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MCP-Server/AccessLogsBucket/Resource"
   }
  },
  "AccessLogsBucketPolicy7F77476F": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "AccessLogsBucket83982689"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "AccessLogsBucket83982689",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AccessLogsBucket83982689",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "AccessLogsBucket83982689",
           "Arn"
          ]
         }
        },
        "StringEquals": {
         "aws:SourceAccount": "661235013910"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "logging.s3.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "AccessLogsBucket83982689",
            "Arn"
           ]
          },
          "/server-access-logs/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "AccessLogsBucket83982689",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AccessLogsBucket83982689",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:PutObject",
       "Effect": "Allow",
       "Principal": {
        "AWS": "arn:aws:iam::127311923021:root"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "AccessLogsBucket83982689",
            "Arn"
           ]
          },
          "/AWSLogs/661235013910/*"
         ]
        ]
       }
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "StringEquals": {
         "s3:x-amz-acl": "bucket-owner-full-control"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "delivery.logs.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "AccessLogsBucket83982689",
            "Arn"
           ]
          },
          "/AWSLogs/661235013910/*"
         ]
        ]
       }
      },
      {
       "Action": "s3:GetBucketAcl",
       "Effect": "Allow",
       "Principal": {
        "Service": "delivery.logs.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "AccessLogsBucket83982689",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/AccessLogsBucket/Policy/Resource"
   }
  },
  "AccessLogsBucketAutoDeleteObjectsCustomResource93F9213A": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "AccessLogsBucket83982689"
    }
   },
   "DependsOn": [
    "AccessLogsBucketPolicy7F77476F"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MCP-Server/AccessLogsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-661235013910-us-east-1",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "AccessLogsBucket83982689"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "ApplicationLoadBalancerFD56DEE1": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     },
     {
      "Key": "routing.http2.enabled",
      "Value": "true"
     },
     {
      "Key": "access_logs.s3.enabled",
      "Value": "true"
     },
     {
      "Key": "access_logs.s3.bucket",
      "Value": {
       "Ref": "AccessLogsBucket83982689"
      }
     },
     {
      "Key": "access_logs.s3.prefix",
      "Value": ""
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "HttpSecurityGroupc8adc83b347C591A",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCpublicSubnet1SubnetAEE1BC0E66B595D5"
     },
     {
      "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCpublicSubnet2Subnet6731BC9603C67782"
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "AccessLogsBucketPolicy7F77476F"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/ApplicationLoadBalancer/Resource"
   }
  },
  "ApplicationLoadBalancerHttpListener075DDBFE": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "FixedResponseConfig": {
       "ContentType": "text/plain",
       "MessageBody": "No matching route found",
       "StatusCode": "404"
      },
      "Type": "fixed-response"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "ApplicationLoadBalancerFD56DEE1"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/ApplicationLoadBalancer/HttpListener/Resource"
   }
  },
  "ApplicationLoadBalancerHttpListenerWeatherNodeJsRouteRule87CEE882": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "WeatherNodeJsServerWeatherNodeJsTargetGroupDE46D28D"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/weather-nodejs/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "ApplicationLoadBalancerHttpListener075DDBFE"
    },
    "Priority": 21
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/ApplicationLoadBalancer/HttpListener/WeatherNodeJsRouteRule/Resource"
   }
  },
  "ApplicationLoadBalancerHttpListenerWeatherNodeJsLambdaRouteRule9EFAA796": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "WeatherNodeJsLambdaServerTargetGroup501BC2F2"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/weather-nodejs-lambda/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "ApplicationLoadBalancerHttpListener075DDBFE"
    },
    "Priority": 22
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/ApplicationLoadBalancer/HttpListener/WeatherNodeJsLambdaRouteRule/Resource"
   }
  },
  "ApplicationLoadBalancerHttpListenerOnshapeMCPRouteRule922D44B4": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "OnshapeMCPServerOnshapeMCPTargetGroup5449C3CB"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/onshape/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "ApplicationLoadBalancerHttpListener075DDBFE"
    },
    "Priority": 23
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/ApplicationLoadBalancer/HttpListener/OnshapeMCPRouteRule/Resource"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTask/TaskRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleDefaultPolicy9E25B518": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleDefaultPolicy9E25B518",
    "Roles": [
     {
      "Ref": "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTask/TaskRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTaskCFF24FBB": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "PORT",
        "Value": "8080"
       },
       {
        "Name": "BASE_PATH",
        "Value": "/weather-nodejs"
       },
       {
        "Name": "AWS_REGION",
        "Value": "us-east-1"
       },
       {
        "Name": "COGNITO_USER_POOL_ID",
        "Value": {
         "Ref": "UserPoolIdParamParameter"
        }
       },
       {
        "Name": "COGNITO_CLIENT_ID",
        "Value": {
         "Ref": "UserPoolClientIdParamParameter"
        }
       },
       {
        "Name": "MCP_SERVER_BASE_URL_PARAMETER_NAME",
        "Value": "/mcp/https-url"
       }
      ],
      "Essential": true,
      "HealthCheck": {
       "Command": [
        "CMD-SHELL",
        "curl -f http://localhost:8080/weather-nodejs/ || exit 1"
       ],
       "Interval": 30,
       "Retries": 3,
       "StartPeriod": 60,
       "Timeout": 5
      },
      "Image": {
       "Fn::Sub": "661235013910.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-661235013910-us-east-1:7d4d4458c07f239d360686ee39320c2a4e41c0f89eac8986b62dbb86e598d455"
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "WeatherNodeJsServerWeatherNodeJsLogsAF0ADC45"
        },
        "awslogs-stream-prefix": "mcp-weathernodejs",
        "awslogs-region": "us-east-1"
       }
      },
      "Name": "WeatherNodeJsContainer",
      "PortMappings": [
       {
        "ContainerPort": 8080,
        "HostPort": 8080,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "WeatherNodeJsServerWeatherNodeJsTaskExecutionRole3679ED78",
      "Arn"
     ]
    },
    "Family": "MCPServerWeatherNodeJsServerWeatherNodeJsTaskA4AB8A88",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTask/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTaskExecutionRole3679ED78": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTask/ExecutionRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTaskExecutionRoleDefaultPolicy8BC37CC6": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:ecr:us-east-1:661235013910:repository/cdk-hnb659fds-container-assets-661235013910-us-east-1"
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WeatherNodeJsServerWeatherNodeJsLogsAF0ADC45",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WeatherNodeJsServerWeatherNodeJsTaskExecutionRoleDefaultPolicy8BC37CC6",
    "Roles": [
     {
      "Ref": "WeatherNodeJsServerWeatherNodeJsTaskExecutionRole3679ED78"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTask/ExecutionRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "WeatherNodeJsServerWeatherNodeJsLogsAF0ADC45": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/ecs/mcp-weathernodejs-server",
    "RetentionInDays": 7,
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsLogs/Resource"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsServiceSecurityGroupDA226A0D": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security group for WeatherNodeJs MCP server service",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "Description": "Allow traffic from WeatherNodeJs ALB to container",
      "FromPort": 8080,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::GetAtt": [
        "HttpSecurityGroupc8adc83b347C591A",
        "GroupId"
       ]
      },
      "ToPort": 8080
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsServiceSecurityGroup/Resource"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsServiceSecurityGroupfromMCPServerHttpSecurityGroupc8adc83b6A0D2EA580805EC8A9F9": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "WeatherNodeJsServerWeatherNodeJsServiceSecurityGroupDA226A0D",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "HttpSecurityGroupc8adc83b347C591A",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsServiceSecurityGroup/from MCPServerHttpSecurityGroupc8adc83b6A0D2EA5:8080"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsService3FD54841": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "MCPCluster399F09A9"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 100,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 2,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "WeatherNodeJsContainer",
      "ContainerPort": 8080,
      "TargetGroupArn": {
       "Ref": "WeatherNodeJsServerWeatherNodeJsTargetGroupDE46D28D"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "WeatherNodeJsServerWeatherNodeJsServiceSecurityGroupDA226A0D",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet1Subnet9FF5B95861818854"
       },
       {
        "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet2Subnet5E0860C9E75204C0"
       }
      ]
     }
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TaskDefinition": {
     "Ref": "WeatherNodeJsServerWeatherNodeJsTaskCFF24FBB"
    }
   },
   "DependsOn": [
    "ApplicationLoadBalancerHttpListenerWeatherNodeJsRouteRule87CEE882",
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleDefaultPolicy9E25B518",
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsService/Service"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsServiceTaskCountTarget3F234DFD": {
   "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
   "Properties": {
    "MaxCapacity": 5,
    "MinCapacity": 1,
    "ResourceId": {
     "Fn::Join": [
      "",
      [
       "service/",
       {
        "Ref": "MCPCluster399F09A9"
       },
       "/",
       {
        "Fn::GetAtt": [
         "WeatherNodeJsServerWeatherNodeJsService3FD54841",
         "Name"
        ]
       }
      ]
     ]
    },
    "RoleARN": "arn:aws:iam::661235013910:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
    "ScalableDimension": "ecs:service:DesiredCount",
    "ServiceNamespace": "ecs"
   },
   "DependsOn": [
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleDefaultPolicy9E25B518",
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsService/TaskCount/Target/Resource"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsServiceTaskCountTargetWeatherNodeJsCpuScalingBC4C6BC9": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "MCPServerWeatherNodeJsServerWeatherNodeJsServiceTaskCountTargetWeatherNodeJsCpuScalingB91D3AC8",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "WeatherNodeJsServerWeatherNodeJsServiceTaskCountTarget3F234DFD"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
     },
     "ScaleInCooldown": 60,
     "ScaleOutCooldown": 60,
     "TargetValue": 70
    }
   },
   "DependsOn": [
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleDefaultPolicy9E25B518",
    "WeatherNodeJsServerWeatherNodeJsTaskTaskRoleE1943BDC"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsService/TaskCount/Target/WeatherNodeJsCpuScaling/Resource"
   }
  },
  "WeatherNodeJsServerWeatherNodeJsTargetGroupDE46D28D": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/weather-nodejs/",
    "HealthCheckPort": "8080",
    "HealthCheckTimeoutSeconds": 5,
    "HealthyThresholdCount": 3,
    "Name": "weathernodejsserver-weathernodej",
    "Port": 8080,
    "Protocol": "HTTP",
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "UnhealthyThresholdCount": 3,
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsServer/WeatherNodeJsTargetGroup/Resource"
   }
  },
  "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTask/TaskRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "OnshapeMCPServerOnshapeMCPTaskTaskRoleDefaultPolicy80957709": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "OnshapeMCPServerOnshapeMCPTaskTaskRoleDefaultPolicy80957709",
    "Roles": [
     {
      "Ref": "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTask/TaskRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "OnshapeMCPServerOnshapeMCPTaskDC9CAB19": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "PORT",
        "Value": "8080"
       },
       {
        "Name": "BASE_PATH",
        "Value": "/onshape"
       },
       {
        "Name": "AWS_REGION",
        "Value": "us-east-1"
       },
       {
        "Name": "COGNITO_USER_POOL_ID",
        "Value": {
         "Ref": "UserPoolIdParamParameter"
        }
       },
       {
        "Name": "COGNITO_CLIENT_ID",
        "Value": {
         "Ref": "UserPoolClientIdParamParameter"
        }
       },
       {
        "Name": "ONSHAPE_ACCESS_KEY",
        "Value": "on_MbbD7rBrxSC06uYCPO3nL"
       },
       {
        "Name": "ONSHAPE_SECRET_KEY",
        "Value": "LHS5Xe942iNbWzPUcT435ZLvK8CcEeuj7JZWlVBMcO1ogcTM"
       },
       {
        "Name": "ONSHAPE_API_URL",
        "Value": "https://cad.onshape.com/api/v12"
       },
       {
        "Name": "MCP_SERVER_BASE_URL_PARAMETER_NAME",
        "Value": "/mcp/https-url"
       }
      ],
      "Essential": true,
      "HealthCheck": {
       "Command": [
        "CMD-SHELL",
        "curl -f http://localhost:8080/onshape/ || exit 1"
       ],
       "Interval": 30,
       "Retries": 3,
       "StartPeriod": 60,
       "Timeout": 5
      },
      "Image": {
       "Fn::Sub": "661235013910.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-661235013910-us-east-1:48010a6860345614f0c093d1627e1adc0699b903f0bd27b6e34576fa3d6ab110"
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "OnshapeMCPServerOnshapeMCPLogs66370C91"
        },
        "awslogs-stream-prefix": "mcp-onshapemcp",
        "awslogs-region": "us-east-1"
       }
      },
      "Name": "OnshapeMCPContainer",
      "PortMappings": [
       {
        "ContainerPort": 8080,
        "HostPort": 8080,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "OnshapeMCPServerOnshapeMCPTaskExecutionRoleD12FC66D",
      "Arn"
     ]
    },
    "Family": "MCPServerOnshapeMCPServerOnshapeMCPTaskCEE71D0D",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTask/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "OnshapeMCPServerOnshapeMCPTaskExecutionRoleD12FC66D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTask/ExecutionRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "OnshapeMCPServerOnshapeMCPTaskExecutionRoleDefaultPolicyCC3C6FA2": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:ecr:us-east-1:661235013910:repository/cdk-hnb659fds-container-assets-661235013910-us-east-1"
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "OnshapeMCPServerOnshapeMCPLogs66370C91",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "OnshapeMCPServerOnshapeMCPTaskExecutionRoleDefaultPolicyCC3C6FA2",
    "Roles": [
     {
      "Ref": "OnshapeMCPServerOnshapeMCPTaskExecutionRoleD12FC66D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTask/ExecutionRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Task role needs access to MCP-related SSM parameters using consistent prefix pattern",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:aws:ssm:us-east-1:661235013910:parameter/mcp/*"
       ]
      },
      {
       "reason": "ECS task execution role requires ECR, CloudWatch Logs, and Secrets Manager access",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Environment variables contain non-sensitive configuration values only - sensitive values are passed via Secrets Manager",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "OnshapeMCPServerOnshapeMCPLogs66370C91": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/ecs/mcp-onshapemcp-server",
    "RetentionInDays": 7,
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPLogs/Resource"
   }
  },
  "OnshapeMCPServerOnshapeMCPServiceSecurityGroup80D86EE6": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security group for OnshapeMCP MCP server service",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "Description": "Allow traffic from OnshapeMCP ALB to container",
      "FromPort": 8080,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::GetAtt": [
        "HttpSecurityGroupc8adc83b347C591A",
        "GroupId"
       ]
      },
      "ToPort": 8080
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPServiceSecurityGroup/Resource"
   }
  },
  "OnshapeMCPServerOnshapeMCPServiceSecurityGroupfromMCPServerHttpSecurityGroupc8adc83b6A0D2EA58080D1A5DC3F": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "OnshapeMCPServerOnshapeMCPServiceSecurityGroup80D86EE6",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "HttpSecurityGroupc8adc83b347C591A",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPServiceSecurityGroup/from MCPServerHttpSecurityGroupc8adc83b6A0D2EA5:8080"
   }
  },
  "OnshapeMCPServerOnshapeMCPServiceE5702A3A": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "MCPCluster399F09A9"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 100,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 2,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "OnshapeMCPContainer",
      "ContainerPort": 8080,
      "TargetGroupArn": {
       "Ref": "OnshapeMCPServerOnshapeMCPTargetGroup5449C3CB"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "OnshapeMCPServerOnshapeMCPServiceSecurityGroup80D86EE6",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet1Subnet9FF5B95861818854"
       },
       {
        "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet2Subnet5E0860C9E75204C0"
       }
      ]
     }
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TaskDefinition": {
     "Ref": "OnshapeMCPServerOnshapeMCPTaskDC9CAB19"
    }
   },
   "DependsOn": [
    "ApplicationLoadBalancerHttpListenerOnshapeMCPRouteRule922D44B4",
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleDefaultPolicy80957709",
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPService/Service"
   }
  },
  "OnshapeMCPServerOnshapeMCPServiceTaskCountTargetC54E72FC": {
   "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
   "Properties": {
    "MaxCapacity": 5,
    "MinCapacity": 1,
    "ResourceId": {
     "Fn::Join": [
      "",
      [
       "service/",
       {
        "Ref": "MCPCluster399F09A9"
       },
       "/",
       {
        "Fn::GetAtt": [
         "OnshapeMCPServerOnshapeMCPServiceE5702A3A",
         "Name"
        ]
       }
      ]
     ]
    },
    "RoleARN": "arn:aws:iam::661235013910:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
    "ScalableDimension": "ecs:service:DesiredCount",
    "ServiceNamespace": "ecs"
   },
   "DependsOn": [
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleDefaultPolicy80957709",
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPService/TaskCount/Target/Resource"
   }
  },
  "OnshapeMCPServerOnshapeMCPServiceTaskCountTargetOnshapeMCPCpuScalingC5DCC372": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "MCPServerOnshapeMCPServerOnshapeMCPServiceTaskCountTargetOnshapeMCPCpuScaling86C999BB",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "OnshapeMCPServerOnshapeMCPServiceTaskCountTargetC54E72FC"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
     },
     "ScaleInCooldown": 60,
     "ScaleOutCooldown": 60,
     "TargetValue": 70
    }
   },
   "DependsOn": [
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleDefaultPolicy80957709",
    "OnshapeMCPServerOnshapeMCPTaskTaskRoleF99506A0"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPService/TaskCount/Target/OnshapeMCPCpuScaling/Resource"
   }
  },
  "OnshapeMCPServerOnshapeMCPTargetGroup5449C3CB": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/onshape/",
    "HealthCheckPort": "8080",
    "HealthCheckTimeoutSeconds": 5,
    "HealthyThresholdCount": 3,
    "Name": "onshapemcpserver-onshapemcp-tg",
    "Port": 8080,
    "Protocol": "HTTP",
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "UnhealthyThresholdCount": 3,
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/OnshapeMCPServer/OnshapeMCPTargetGroup/Resource"
   }
  },
  "WeatherNodeJsLambdaServiceRoleC654D64C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambda/ServiceRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda function requires basic VPC and CloudWatch Logs permissions through managed policy",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      }
     ]
    }
   }
  },
  "WeatherNodeJsLambdaSecurityGroupE3502688": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatic security group for Lambda Function MCPServerWeatherNodeJsLambdaE263BC9D",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPC68ADF9D1105DCCDE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambda/SecurityGroup/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda function requires basic VPC and CloudWatch Logs permissions through managed policy",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      }
     ]
    }
   }
  },
  "WeatherNodeJsLambda509B59F4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Sub": "661235013910.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-661235013910-us-east-1:9b839136648fdf80b3edbf74e50b18aebca048190410b944c5a3571298e07f40"
     }
    },
    "Environment": {
     "Variables": {
      "COGNITO_USER_POOL_ID": {
       "Ref": "UserPoolIdParamParameter"
      },
      "COGNITO_CLIENT_ID": {
       "Ref": "UserPoolClientIdParamParameter"
      },
      "PORT": "8080"
     }
    },
    "MemorySize": 1024,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "WeatherNodeJsLambdaServiceRoleC654D64C",
      "Arn"
     ]
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "Timeout": 60,
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "WeatherNodeJsLambdaSecurityGroupE3502688",
        "GroupId"
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet1Subnet9FF5B95861818854"
      },
      {
       "Fn::ImportValue": "MCP-VPC:ExportsOutputRefMCPVPCprivateSubnet2Subnet5E0860C9E75204C0"
      }
     ]
    }
   },
   "DependsOn": [
    "WeatherNodeJsLambdaServiceRoleC654D64C"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambda/Resource",
    "aws:asset:path": "asset.9b839136648fdf80b3edbf74e50b18aebca048190410b944c5a3571298e07f40",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda function requires basic VPC and CloudWatch Logs permissions through managed policy",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      }
     ]
    }
   }
  },
  "WeatherNodeJsLambdaInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYA6E63ECC": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "WeatherNodeJsLambda509B59F4",
      "Arn"
     ]
    },
    "Principal": "elasticloadbalancing.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambda/Invoke2UTWxhlfyqbT5FTn--5jvgbLgj+FfJwzswGk55DU1H--Y=",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda function requires basic VPC and CloudWatch Logs permissions through managed policy",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      }
     ]
    }
   }
  },
  "WeatherNodeJsLambdaAllowALBInvokeCC2C0262": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "WeatherNodeJsLambda509B59F4",
      "Arn"
     ]
    },
    "Principal": "elasticloadbalancing.amazonaws.com",
    "SourceArn": {
     "Ref": "WeatherNodeJsLambdaServerTargetGroup501BC2F2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambda/AllowALBInvoke",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda function requires basic VPC and CloudWatch Logs permissions through managed policy",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      }
     ]
    }
   }
  },
  "WeatherNodeJsLambdaServerTargetGroup501BC2F2": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ],
    "TargetType": "lambda",
    "Targets": [
     {
      "Id": {
       "Fn::GetAtt": [
        "WeatherNodeJsLambda509B59F4",
        "Arn"
       ]
      }
     }
    ]
   },
   "DependsOn": [
    "WeatherNodeJsLambdaInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYA6E63ECC"
   ],
   "Metadata": {
    "aws:cdk:path": "MCP-Server/WeatherNodeJsLambdaServer/TargetGroup/Resource"
   }
  },
  "MCPServerStackDistributionBF2ADB65": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Comment": "CloudFront distribution for MCP-Server stack",
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD",
       "OPTIONS",
       "PUT",
       "PATCH",
       "POST",
       "DELETE"
      ],
      "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
      "Compress": true,
      "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
      "TargetOriginId": "MCPServerMCPServerStackDistributionOrigin174F624B6",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "Enabled": true,
     "HttpVersion": "http2and3",
     "IPV6Enabled": true,
     "Logging": {
      "Bucket": {
       "Fn::GetAtt": [
        "AccessLogsBucket83982689",
        "RegionalDomainName"
       ]
      },
      "Prefix": "cloudfront-logs/"
     },
     "Origins": [
      {
       "ConnectionAttempts": 3,
       "ConnectionTimeout": 10,
       "CustomOriginConfig": {
        "HTTPPort": 80,
        "HTTPSPort": 443,
        "OriginKeepaliveTimeout": 5,
        "OriginProtocolPolicy": "http-only",
        "OriginReadTimeout": 30,
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::GetAtt": [
         "ApplicationLoadBalancerFD56DEE1",
         "DNSName"
        ]
       },
       "Id": "MCPServerMCPServerStackDistributionOrigin174F624B6"
      }
     ],
     "PriceClass": "PriceClass_100",
     "Restrictions": {
      "GeoRestriction": {
       "Locations": [
        "US",
        "CA",
        "MX",
        "GB",
        "DE",
        "FR",
        "IE",
        "NL",
        "SE",
        "NO",
        "FI",
        "DK",
        "ES",
        "IT",
        "CH",
        "AT",
        "BE",
        "PL",
        "JP",
        "KR",
        "SG",
        "AU",
        "NZ",
        "HK",
        "TW",
        "IN",
        "ID",
        "MY",
        "TH",
        "VN",
        "BR",
        "AR",
        "CL",
        "CO",
        "PE",
        "AE",
        "BH",
        "IL",
        "SA"
       ],
       "RestrictionType": "whitelist"
      }
     },
     "WebACLId": {
      "Ref": "CloudFrontWafArnParamParameter"
     }
    },
    "Tags": [
     {
      "Key": "Project",
      "Value": "MCP-Servers-On-AWS"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/MCPServerStackDistribution/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Development environment using default CloudFront certificate without custom domain - TLS settings are managed by CloudFront",
       "id": "AwsSolutions-CFR4"
      },
      {
       "reason": "Development environment using HTTP-only communication to ALB origin which is internal to VPC",
       "id": "AwsSolutions-CFR5"
      }
     ]
    }
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/31TTW/bMAz9Lbs72pYVGHZsUnQoUKCBk3tBy4zBxpYMUsoQGP7vo+zYcYahJ349iuQjtTbr77/Mty/wR1a2PK1qKky3D2BP2fbodsDQYEDOchQf2WKmwPcOrZhuW0dJIcVN6jNwBQEPIKcnPJKjQN4lwL8e7wKQQ174rrl75DNpHU2a1L2FGop6eHbrowt9hnatbaKNTOHym31sx4TPHC+uYhTpM/lhuk20JwwJc9VGsfM12cvNPdparwYJZGsPZaHNOEuuOmsLj22rAEgDvGpsM8RGTu7sJY6UKnfFTPp/4nmscYkZ7AXuoHxhmEddmIkefgcRDGKevM7BLw1U+Jg8KWZybL1Q8HzZgGBG0Jgu92O9Qd54mBiofaU7f/XVXHHS+wxuXUEMXnRfyo8uaF5c6m1YyL1nFAfWc9OE/Zh3q33n0BagKUow3WKk5+jsdGNLfYfckIhafaZbi+WR9eQ0VclkKuKEW9p9n231jH0z33piY9bvQjv2ZyqRB/oGXvXPVNprynmLoY16pM6XaD7k63n9YH7qH/sQohXr/VKDJh/lX8WFx4WAAwAA"
   },
   "Metadata": {
    "aws:cdk:path": "MCP-Server/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "CloudFrontDistributions": {
   "Description": "CloudFront HTTPS URLs for all MCP servers",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "MCPServerStackDistributionBF2ADB65",
        "DomainName"
       ]
      }
     ]
    ]
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}